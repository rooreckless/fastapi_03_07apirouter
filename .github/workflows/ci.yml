# .github/workflows/ci.yml
name: CI

on:
  pull_request:
    branches: [ develop ]     # ← develop 向けPRで発火
  workflow_dispatch:          # ← 手動実行も可（任意）

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true

    steps:
      # --- リポジトリからのソースコードのチェックアウト=ダウンロード ---
      - name: Checkout
        uses: actions/checkout@v4
      # ---docker/setup-buildx-actionについては、https://qiita.com/_kei_s/items/15c067090d5142648aac#dockersetup-buildx-action---
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # dev 依存入りの ruff/test イメージをビルド
      - name: Build images (ruff, test)
        run: docker compose --profile test build ruff-fastapi pytest-fastapi

      - name: Ruff check
        run: docker compose --profile test run --rm ruff-fastapi ruff check /fastapi/app

      # # --- デバッグ用(basedpyrightの設定ファイルpyright.jsonが読めているかどうか) ---
      # - name: Type check (basedpyright, verbose)
      #   run: docker compose --profile test run --rm ruff-fastapi basedpyright --verbose | head -n 40

      # - name: Type check (basedpyright)
      #   run: docker compose --profile test run --rm ruff basedpyright
      # --- .envsの環境変数をシークレットから作成 ---
      - name: Create CI env file
        run: |
          mkdir -p .envs/local
          cat > .envs/local/postgres <<'EOF'
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          EOF
      # DB起動
      - name: Start DB
        run: docker compose up -d postgres
        # 環境変数を .envs/local/postgres で読ませるなら特に何も不要
        # もし .env をコミットしていない場合は、env: で渡す
        # env:
        #   POSTGRES_DB: appdb
        #   POSTGRES_USER: appuser
        #   POSTGRES_PASSWORD: apppass

      # DBが起動完了するまで(healthyになるまで)待つ
      - name: Wait for DB healthy
        run: |
          for i in $(seq 1 30); do
            if docker compose ps postgres | grep -q "healthy"; then exit 0; fi
            sleep 2
          done
          echo "Postgres not healthy"
          docker compose logs postgres
          exit 1
      # --- pytest 実行時、アプリ側の接続文字列も付与 ---
      # pytest-fastapiサービスのコンテナにカバレッジありでpytestを実行しレポートを出させる(コンソール+html+xml)
      # -e はそのコンテナの環境変数設定用
      # -v はそのコンテナにボリュームマウントさせてレポートをアップロードするためのもの
      - name: Pytest (with coverage)
        run: |
          mkdir -p ci_artifacts
          docker compose --profile test run --rm \
            -e PYTHONPATH=/fastapi \
            -e DATABASE_URL=postgresql+asyncpg://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DB }} \
            -v "${{ github.workspace }}/ci_artifacts:/ci_artifacts" \
            pytest-fastapi /fastapi/.venv/bin/pytest tests -q \
              --cov=app --cov-branch \
              --cov-report=term-missing:skip-covered \
              --cov-report=xml:/ci_artifacts/coverage.xml \
              --cov-report=html:/ci_artifacts/htmlcov
      # --- カバレッジのアーティファクトを残す=アップロード（HTML/XML） ---
      - name: Upload coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            ci_artifacts/coverage.xml
            ci_artifacts/htmlcov
      # ---終了処理---
      - name: Teardown
        if: always()
        run: docker compose down -v
